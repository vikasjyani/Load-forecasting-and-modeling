# KSEB Energy Futures Platform - Complete User Interface Documentation ## Table of Contents 1. [Platform Overview](#platform-overview) 2. [Home Page](#home-page) 3. [Project Management](#project-management) 4. [Demand Projection Module](#demand-projection-module) 5. [Load Profile Generation Module](#load-profile-generation-module) 6. [PyPSA Modeling Module](#pypsa-modeling-module) 7. [PyPSA Results Visualization](#pypsa-results-visualization) 8. [Admin Panel](#admin-panel) 9. [Helper Pages](#helper-pages) 10. [Data Flow Diagrams](#data-flow-diagrams) 11. [API Reference](#api-reference) --- ## 1. Platform Overview The KSEB Energy Futures Platform is a comprehensive web-based application for electricity demand forecasting, load profile generation, and power system modeling using PyPSA (Python for Power System Analysis). ### Key Features: - Multi-project management system - Advanced demand forecasting with multiple models - Intelligent load profile generation - PyPSA-based power system optimization - Interactive data visualization - Comprehensive reporting capabilities --- ## 2. Home Page ### URL: `/` or `/home` ### Page Layout: ``` +----------------------------------------------------------+ | KSEB Energy Futures | | Platform | +----------------------------------------------------------+ | Current Project: [Project Name] | [Change Project] btn | +----------------------------------------------------------+ | | | +------------------+ +------------------+ | | | Recent Projects | | Recent Activities | | | | | | | | | | • Project A | | • Forecast run | | | | • Project B | | 2 hours ago | | | | • Project C | | • Profile created| | | | | | 5 hours ago | | | +------------------+ +------------------+ | | | | +---------------------------------------------------+ | | | Quick Actions Panel | | | | | | | | [Create Project] [Load Project] [View Tutorials] | | | | | | | | [Demand Projection] [Load Profile] [PyPSA Model] | | | +---------------------------------------------------+ | | | | +---------------------------------------------------+ | | | System Status Dashboard | | | | | | | | • Active Jobs: 2 | | | | • Storage Used: 45.2 GB / 100 GB | | | | • Last Backup: 2024-01-15 14:30 | | | +---------------------------------------------------+ | +----------------------------------------------------------+ ``` ### Interactive Elements: #### 1. **Current Project Display** - **Location**: Top bar - **Functionality**: Shows currently loaded project name - **Data Source**: `app.config['CURRENT_PROJECT']` #### 2. **Change Project Button** - **Type**: Button - **Action**: Opens project selection modal - **API Call**: None (opens modal) #### 3. **Recent Projects List** - **Type**: Clickable list - **Action**: Click to load project - **API Call**: `GET /api/recent_projects` - **Response Format**: ```json { "projects": [ { "name": "Project A", "path": "/path/to/project", "last_modified": "2024-01-15T10:30:00", "created": "2024-01-01T09:00:00" } ] } ``` #### 4. **Quick Action Buttons** - **Create Project**: Navigates to `/project/create` - **Load Project**: Opens project browser modal - **View Tutorials**: Navigates to `/tutorials` - **Module Buttons**: Navigate to respective module pages ### Data Flow: ```mermaid graph TD A[Page Load] --> B[Fetch Current Project] B --> C[GET /api/recent_projects] C --> D[Display Project List] B --> E[GET /api/recent_activities] E --> F[Display Activities] B --> G[Check System Status] G --> H[Display Status Dashboard] ``` --- ## 3. Project Management ### 3.1 Create New Project Page #### URL: `/project/create` #### Page Layout: ``` +----------------------------------------------------------+ | Create New Project | +----------------------------------------------------------+ | | | Project Information | | +---------------------------------------------------+ | | | Project Name: [___________________] | | | | | | | | Description: [_____________________] | | | | [_____________________] | | | | | | | | Location: [___________________] [Browse] | | | | | | | | Project Type: [Standard ▼] | | | | | | | | □ Initialize with sample data | | | | □ Copy settings from: [Select Project ▼] | | | +---------------------------------------------------+ | | | | Template Selection | | +---------------------------------------------------+ | | | □ Demand Projection Template | | | | □ Load Profile Template | | | | □ PyPSA Model Template | | | +---------------------------------------------------+ | | | | [Cancel] [Create Project] | +----------------------------------------------------------+ ``` #### Form Elements: 1. **Project Name Input** - **Validation**: Alphanumeric, underscores, no spaces - **Max Length**: 50 characters - **Required**: Yes 2. **Browse Button** - **Action**: Opens system file dialog - **Filter**: Directories only 3. **Create Project Button** - **Validation**: All required fields filled - **API Call**: `POST /project/create` - **Request Body**: ```json { "projectName": "My_Project", "projectLocation": "/home/user/projects", "description": "Solar integration study", "projectType": "standard", "initializeSampleData": true, "copySettingsFrom": "Previous_Project", "templates": ["demand", "load_profile", "pypsa"] } ``` #### Backend Process Flow: ```python def create_project(): # 1. Validate input project_name = secure_filename(request.json['projectName']) # 2. Create directory structure project_path = os.path.join( request.json['projectLocation'], project_name ) os.makedirs(f"{project_path}/inputs") os.makedirs(f"{project_path}/results/demand_projection") os.makedirs(f"{project_path}/results/load_profiles") os.makedirs(f"{project_path}/results/PyPSA_Modeling") os.makedirs(f"{project_path}/results/Pypsa_results") os.makedirs(f"{project_path}/logs") os.makedirs(f"{project_path}/config") # 3. Copy templates if 'demand' in request.json['templates']: shutil.copy( 'static/templates/input_demand_file.xlsx', f"{project_path}/inputs/input_demand_file.xlsx" ) # 4. Update configuration app.config['CURRENT_PROJECT'] = project_name app.config['CURRENT_PROJECT_PATH'] = project_path # 5. Save to recent projects save_recent_project(project_name, project_path) ``` ### 3.2 Load Project Page #### URL: `/project/load` #### Page Layout: ``` +----------------------------------------------------------+ | Load Existing Project | +----------------------------------------------------------+ | | | Select Project Method: | | ( ) Browse for project folder | | (•) Select from recent projects | | | | Recent Projects | | +---------------------------------------------------+ | | | Name | Location | Modified | | | |---------------|---------------------|-------------| | | | Solar_Study | /projects/solar | 2024-01-15 | | | | Wind_Analysis | /projects/wind | 2024-01-14 | | | | Grid_2030 | /projects/grid2030 | 2024-01-10 | | | +---------------------------------------------------+ | | | | Selected: Solar_Study | | | | Project Details: | | +---------------------------------------------------+ | | | Created: 2024-01-01 | | | | Size: 125 MB | | | | Status: ✓ Valid structure | | | | Last Activity: Demand forecast completed | | | +---------------------------------------------------+ | | | | [Cancel] [Validate] [Load Project] | +----------------------------------------------------------+ ``` #### Interactive Elements: 1. **Project Table** - **Type**: Sortable data table - **Columns**: Sortable by name, location, modified date - **Selection**: Single row selection 2. **Validate Button** - **Action**: Checks project structure - **API Call**: `POST /api/validate_project` - **Shows**: Green checkmarks for valid components 3. **Load Project Button** - **API Call**: `POST /project/load` - **Request**: ```json { "projectPath": "/projects/solar/Solar_Study" } ``` --- ## 4. Demand Projection Module ### 4.1 Data Input & View Page #### URL: `/demand_projection` #### Page Layout: ``` +----------------------------------------------------------+ | Demand Projection | +----------------------------------------------------------+ | File Status: ✓ input_demand_file.xlsx loaded | | [Upload New File] [Download Template] [View Help] | +----------------------------------------------------------+ | | | +--------+ +------------------------------------------+ | | | Sectors| | Historical Data View | | | | | | | | | | • Dom. | | [Chart: Historical Demand Trends] | | | | • Com. | | | | | | • Ind. | | Year | Domestic | Commercial | Indust. | | | | • Agr. | | 2019 | 4,521 | 2,103 | 3,890 | | | | • Rail | | 2020 | 4,702 | 1,987 | 3,654 | | | | • Oth. | | 2021 | 4,889 | 2,234 | 4,102 | | | +--------+ +------------------------------------------+ | | | | Forecast Configuration | | +----------------------------------------------------+ | | | Scenario Name: [_________________] | | | | Target Year: [2030 ▼] End Year: [2050 ▼] | | | | □ Exclude COVID Years (2020-2021) | | | | | | | | Sector-wise Model Configuration: | | | | +------------------------------------------------+ | | | | | Sector | Model | Parameters | Weight| | | | | |-----------|----------|----------------|-------| | | | | | Domestic | [MLR ▼] | [Configure] | 40% | | | | | | Commercial| [SLR ▼] | [Configure] | 30% | | | | | | Industrial| [WAM ▼] | [Configure] | 20% | | | | | | Others | [Time ▼] | [Configure] | 10% | | | | | +------------------------------------------------+ | | | +----------------------------------------------------+ | | | | [Reset] [Validate] [Run Forecast] [View Previous Runs] | +----------------------------------------------------------+ ``` #### Interactive Components: 1. **Upload New File Button** - **Action**: Opens file upload dialog - **Accepted**: .xlsx files only - **API Call**: `POST /api/upload_demand_file` - **Validation**: Checks for required sheets and columns 2. **Historical Data Chart** - **Type**: Interactive line chart (Plotly.js) - **Features**: - Zoom and pan - Toggle sectors on/off - Export as PNG - **API Call**: `GET /api/chart_data/historical` 3. **Model Configuration Modal** (Opens on Configure click) ``` +----------------------------------+ | Configure MLR for Domestic | +----------------------------------+ | Independent Variables: | | ☑ GDP Growth | | ☑ Population | | ☐ Temperature | | ☑ Per Capita Income | | | | Advanced Options: | | Confidence Level: [95% ▼] | | Regularization: [None ▼] | | Cross-validation: [5-fold ▼] | | | | [Cancel] [Apply] | +----------------------------------+ ``` 4. **Run Forecast Button** - **Validation**: All required fields - **API Call**: `POST /api/run_forecast` - **Shows**: Progress modal with real-time updates #### Forecast Execution Flow: ```mermaid sequenceDiagram participant UI participant API participant Worker participant Storage UI->>API: POST /api/run_forecast API->>Worker: Create forecast job API-->>UI: Return job_id loop Check Status UI->>API: GET /api/forecast_status/{job_id} API-->>UI: Progress update end Worker->>Storage: Save sector results Worker->>API: Mark job complete UI->>API: GET /api/forecast_results/{job_id} API-->>UI: Return results location ``` ### 4.2 Demand Visualization Page #### URL: `/demand_visualization` #### Page Layout: ``` +----------------------------------------------------------+ | Demand Forecast Results | +----------------------------------------------------------+ | Scenario Selection: [HighGrowth_2040 ▼] [Compare ▼] | | Filters: Sector [All ▼] Model [All ▼] Years [2025-2050] | +----------------------------------------------------------+ | | | +----------------------------------------------------+ | | | Aggregated Demand Forecast | | | | | | | | [Interactive Area Chart showing total demand] | | | | | | | | Legend: ■ Historical ■ MLR ■ SLR ■ WAM ■ TimeSeries| | | +----------------------------------------------------+ | | | | +------------------------+ +-------------------------+ | | | Sector Breakdown | | Model Performance | | | | | | | | | | [Stacked Bar Chart] | | Model | MAPE | R² | | | | | | MLR | 2.3% | 0.96 | | | | ■ Domestic | | SLR | 3.1% | 0.94 | | | | ■ Commercial | | WAM | 2.8% | 0.95 | | | | ■ Industrial | | Time | 3.5% | 0.92 | | | +------------------------+ +-------------------------+ | | | | Detailed Results Table | | +----------------------------------------------------+ | | | Year | Domestic | Commercial | Industrial | Total | | | |------|----------|------------|------------|--------| | | | 2025 | 5,234 | 2,567 | 4,890 | 12,691 | | | | 2026 | 5,412 | 2,689 | 5,123 | 13,224 | | | | ... | ... | ... | ... | ... | | | +----------------------------------------------------+ | | | | [Export CSV] [Export PDF] [Save Consolidated] | +----------------------------------------------------------+ ``` #### Visualization Components: 1. **Aggregated Demand Chart** - **Type**: Time series area chart - **Interactions**: - Hover for exact values - Click legend to toggle series - Brush to zoom time range - **API**: `GET /api/forecast_data/{scenario}/aggregated` 2. **Sector Breakdown Chart** - **Type**: Stacked bar chart by year - **Features**: - Animated transitions - Drill-down capability - **API**: `GET /api/forecast_data/{scenario}/sector_breakdown` 3. **Model Performance Metrics** - **Metrics Displayed**: - MAPE (Mean Absolute Percentage Error) - R² (Coefficient of Determination) - RMSE (Root Mean Square Error) - **Update**: Real-time when filters change 4. **Export Functions** - **CSV Export**: Downloads detailed results - **PDF Export**: Generates formatted report - **Save Consolidated**: Creates `consolidated_results.csv` - **API**: `POST /api/save_consolidated_data/{scenario}` --- ## 5. Load Profile Generation Module ### 5.1 Load Profile Creation Page #### URL: `/load_profile_creation` #### Page Layout: ``` +----------------------------------------------------------+ | Load Profile Generation | +----------------------------------------------------------+ | Template Status: ✓ load_curve_template.xlsx loaded | | Historical Years Available: 2019, 2020, 2021, 2022 | +----------------------------------------------------------+ | | | Generation Method Configuration | | +----------------------------------------------------+ | | | Method: (•) Base Year Scaling | | | | ( ) Statistical Pattern | | | | ( ) Machine Learning | | | | | | | | Base Configuration: | | | | Base Year: [2022 ▼] | | | | Demand Scenario: [HighGrowth_2040 ▼] | | | | | | | | Target Period: | | | | Start Year: [2025 ▼] End Year: [2035 ▼] | | | | | | | | Output Configuration: | | | | Frequency: [Hourly ▼] | | | | Unit: [MW ▼] | | | | Time Zone: [IST ▼] | | | +----------------------------------------------------+ | | | | Load Shape Adjustments | | +----------------------------------------------------+ | | | Peak Load Factor: [===|===] 85% | | | | Base Load Factor: [===|===] 45% | | | | | | | | Seasonal Adjustments: | | | | Summer: [+5%] Winter: [-3%] Monsoon: [0%] | | | | | | | | Special Day Profiles: | | | | ☑ Apply holiday adjustments | | | | ☑ Include festival peaks | | | | ☐ Model industrial shutdowns | | | +----------------------------------------------------+ | | | | [Preview] [Generate Profile] [Advanced Options] | +----------------------------------------------------------+ ``` #### Interactive Elements: 1. **Method Selection Radio Buttons** - Changes available configuration options - Base Year: Simple scaling - Statistical: Pattern recognition - ML: Neural network-based 2. **Demand Scenario Dropdown** - **Source**: Scans `/results/demand_projection/` - **API**: `GET /api/available_demand_scenarios` - **Shows**: Only scenarios with consolidated results 3. **Load Factor Sliders** - **Type**: Range input with live preview - **Range**: 0-100% - **Update**: Real-time chart preview 4. **Preview Button** - **Action**: Shows sample week profile - **API**: `POST /api/preview_load_profile` - **Display**: Modal with interactive chart 5. **Generate Profile Button** - **API**: `POST /api/generate_load_profiles` - **Request**: ```json { "method": "base_year", "base_year": 2022, "forecast_scenario": "HighGrowth_2040", "start_year": 2025, "end_year": 2035, "output_frequency": "hourly", "output_unit": "MW", "adjustments": { "peak_load_factor": 0.85, "base_load_factor": 0.45, "seasonal": { "summer": 0.05, "winter": -0.03, "monsoon": 0 } } } ``` ### 5.2 Load Profile Analysis Page #### URL: `/load_profile_analysis` #### Page Layout: ``` +----------------------------------------------------------+ | Load Profile Analysis | +----------------------------------------------------------+ | Profile: Solar_Heavy_2030_hourly.csv | | Generated: 2024-01-15 14:30 | Size: 8.2 MB | +----------------------------------------------------------+ | | | +----------------------------------------------------+ | | | Annual Load Profile | | | | | | | | [Heatmap Calendar View - 365 days x 24 hours] | | | | | | | | Color Scale: ■ Low Load ■ Medium ■ High Load | | | +----------------------------------------------------+ | | | | Analysis Controls | | Year: [2030 ▼] View: [Monthly ▼] Metric: [Load ▼] | | | | +------------------------+ +-------------------------+ | | | Daily Patterns | | Statistical Summary | | | | | | | | | | [Line chart showing | | Peak Load: 4,567 MW | | | | typical weekday vs | | Min Load: 2,103 MW | | | | weekend patterns] | | Average: 3,245 MW | | | | | | Load Factor: 71.2% | | | | | | Peak Hour: 19:00 | | | +------------------------+ +-------------------------+ | | | | Load Duration Curve | | +----------------------------------------------------+ | | | [Chart showing hours vs load level] | | | | | | | | Key Insights: | | | | • 10% of time above 4,200 MW | | | | • 50% of time above 3,100 MW | | | | • Base load approximately 2,100 MW | | | +----------------------------------------------------+ | | | | [Export Analysis] [Compare Profiles] [Use in PyPSA] | +----------------------------------------------------------+ ``` #### Visualization Components: 1. **Heatmap Calendar** - **Type**: D3.js calendar heatmap - **Interaction**: - Click day for hourly detail - Hover for load values - **API**: `GET /api/load_profile_data/{profile_id}/heatmap` 2. **Daily Pattern Chart** - **Shows**: Average weekday vs weekend - **Features**: - Confidence bands - Peak markers - **API**: `GET /api/load_profile_data/{profile_id}/daily_pattern` 3. **Load Duration Curve** - **Type**: Sorted load values vs hours - **Use**: Capacity planning insights - **Export**: Can export percentile data --- ## 6. PyPSA Modeling Module ### 6.1 PyPSA Model Configuration Page #### URL: `/pypsa_modeling` #### Page Layout: ``` +----------------------------------------------------------+ | PyPSA Model Setup | +----------------------------------------------------------+ | Template: ✓ pypsa_input_template.xlsx loaded | | Load Profile: Solar_Heavy_2030_hourly.csv ✓ | +----------------------------------------------------------+ | | | Scenario Configuration | | +----------------------------------------------------+ | | | Scenario Name: [_____________________] | | | | Description: [_______________________] | | | | | | | | Model Settings (from Excel): | | | | • Run PyPSA Model: Yes | | | | • Investment Mode: Multi-period | | | | • Years: 2025, 2030, 2035, 2040 | | | | • Discount Rate: 7% | | | | | | | | Override Settings: | | | | ☐ Custom year selection: [___________] | | | | ☐ Generator clustering: [None ▼] | | | | ☐ Transmission expansion: [Enabled ▼] | | | +----------------------------------------------------+ | | | | System Components Summary | | +----------------------------------------------------+ | | | Component | Count | Total Capacity | | | |----------------|-------|-------------------------| | | | Generators | 45 | 12,500 MW | | | | Storage Units | 8 | 2,000 MWh | | | | Load Points | 15 | - | | | | Transmission | 32 | 18,000 MW | | | +----------------------------------------------------+ | | | | Solver Configuration | | +----------------------------------------------------+ | | | Solver: [Gurobi ▼] | | | | Time Limit: [3600] seconds | | | | MIP Gap: [0.01] | | | | ☑ Use warm start | | | | ☐ Enable logging | | | +----------------------------------------------------+ | | | | [Validate Model] [Run Simulation] [Expert Mode] | +----------------------------------------------------------+ ``` #### Key Features: 1. **Validate Model Button** - **Action**: Checks model consistency - **API**: `POST /api/validate_pypsa_model` - **Checks**: - Network connectivity - Data completeness - Constraint feasibility 2. **Run Simulation Button** - **API**: `POST /api/run_pypsa_model` - **Opens**: Progress tracking modal - **Request**: ```json { "scenarioName": "Net_Zero_2040", "description": "Carbon neutral by 2040", "overrides": { "years": [2025, 2030, 2035, 2040], "solver": "gurobi", "solver_options": { "MIPGap": 0.01, "TimeLimit": 3600 } } } ``` 3. **Progress Tracking Modal** ``` +----------------------------------+ | PyPSA Model Execution | +----------------------------------+ | Job ID: pypsa_job_12345 | | | | Progress: [=========> ] 75% | | | | Current Step: | | • Network built ✓ | | • Constraints added ✓ | | • Solving year 2030... ⟳ | | • Year 2035 pending | | • Year 2040 pending | | | | Logs: | | [2024-01-15 14:45:12] Starting | | [2024-01-15 14:45:15] Network OK | | [2024-01-15 14:46:23] Solving... | | | | [Cancel] [Run in Background] | +----------------------------------+ ``` --- ## 7. PyPSA Results Visualization ### 7.1 Results Selection Page #### URL: `/pypsa_results` #### Page Layout: ``` +----------------------------------------------------------+ | PyPSA Results Visualization | +----------------------------------------------------------+ | Available Results: | | +----------------------------------------------------+ | | | Scenario | Created | Status | Size | | | |------------------|------------|---------|----------| | | | Net_Zero_2040 | 2024-01-15 | ✓ Ready | 125 MB | | | | High_RE_2035 | 2024-01-14 | ✓ Ready | 98 MB | | | | Base_Case_2030 | 2024-01-13 | ⟳ Process| 45 MB | | | +----------------------------------------------------+ | | | | Selected: Net_Zero_2040 | | [View Results] [Compare Scenarios] [Upload Network] | +----------------------------------------------------------+ ``` ### 7.2 Results Dashboard #### URL: `/pypsa_results/dashboard` #### Page Layout: ``` +----------------------------------------------------------+ | Net_Zero_2040 - Results Dashboard | +----------------------------------------------------------+ | Navigation: [Overview] [Dispatch] [Capacity] [Costs] | | [Emissions] [Network] [Reports] | +----------------------------------------------------------+ | | | Overview Tab | | +----------------------------------------------------+ | | | Key Metrics | | | | +-------------+ +-------------+ +-------------+ | | | | | Total Cost | | Emissions | | RE Share | | | | | | $45.2B | | 12 MtCO2 | | 78.5% | | | | | +-------------+ +-------------+ +-------------+ | | | | | | | | Investment Timeline | | | | [Stacked Area Chart - Investment by Technology] | | | | | | | | System Evolution | | | | [Animated Bar Chart - Capacity by Year] | | | +----------------------------------------------------+ | | | | Dispatch Analysis Tab | | +----------------------------------------------------+ | | | Period: [2030 ▼] Resolution: [Hourly ▼] | | | | Date Range: [Jan 1] to [Dec 31] | | | | | | | | Generation Dispatch | | | | [Stacked Area Chart - Generation by Source] | | | | | | | | Storage Operation | | | | [Dual Axis Chart - Charge/Discharge & SOC] | | | | | | | Curtailment Analysis | | Total Curtailed: 234 GWh (2.3% of RE generation) | | [Time Series Chart - Curtailment by Technology] | +----------------------------------------------------------+ | | | Capacity Analysis Tab | | +----------------------------------------------------+ | | | Installed Capacity by Technology | | | | [Grouped Bar Chart - Comparing Years] | | | | | | | | Technology | 2025 | 2030 | 2035 | 2040 | | | | Solar PV | 2,500 | 4,200 | 6,800 | 9,500 MW | | | | Wind | 1,800 | 3,100 | 4,500 | 6,200 MW | | | | Battery | 500 | 1,200 | 2,500 | 4,000 MWh | | | | Hydro | 1,200 | 1,200 | 1,400 | 1,600 MW | | | | | | | | Capacity Factor Analysis | | | | [Box Plot - CF Distribution by Technology] | | | | | | | | Transmission Expansion | | | | [Network Map - New Lines Highlighted] | | | +----------------------------------------------------+ | | | | Cost Analysis Tab | | +----------------------------------------------------+ | | | Cost Breakdown | | | | [Sunburst Chart - Hierarchical Cost View] | | | | | | | | LCOE by Technology | | | | [Bar Chart with Error Bars] | | | | | | | | Investment Schedule | | | | Year | CAPEX | OPEX | Total | | | | 2025 | $8.2B | $1.1B | $9.3B | | | | 2030 | $12.5B | $1.8B | $14.3B | | | +----------------------------------------------------+ | | | | [Export Results] [Generate Report] [Share Dashboard] | +----------------------------------------------------------+ ``` #### Dashboard Components: ##### 1. **Overview Tab Components** **Key Metrics Cards** - **Data Source**: `GET /api/pypsa/metrics_data/{network_id}` - **Updates**: Real-time when filters change - **Clickable**: Drills down to detailed view **Investment Timeline Chart** - **Type**: Stacked area chart - **API**: `GET /api/pypsa/investment_timeline/{network_id}` - **Interactions**: - Hover for technology breakdown - Click to filter by technology - Zoom for specific periods **System Evolution Animation** - **Type**: Animated bar chart race - **Controls**: Play/Pause/Speed - **Export**: GIF or MP4 ##### 2. **Dispatch Analysis Components** **Period Selector** - **Options**: Individual years or multi-period - **API**: `GET /api/pypsa/available_periods/{network_id}` **Generation Dispatch Chart** - **Type**: Interactive stacked area - **Resolution**: 15-min to monthly - **Features**: - Toggle technologies - Show/hide demand line - Export hourly data - **API**: `GET /api/pypsa/dispatch_data/{network_id}` - **Response Structure**: ```json { "timestamps": ["2030-01-01T00:00", ...], "generation": { "solar": [0, 125.5, 450.2, ...], "wind": [234.1, 245.6, 198.3, ...], "hydro": [500, 500, 480, ...] }, "demand": [2845.2, 2790.1, 2698.5, ...], "curtailment": [0, 0, 45.2, ...] } ``` **Storage Operation Visualization** - **Type**: Dual-axis chart - **Primary Y-axis**: Power (charge/discharge) - **Secondary Y-axis**: State of Charge (%) - **Color Coding**: - Green: Charging - Red: Discharging - Blue: SOC level ##### 3. **Network Flow Visualization** ``` +----------------------------------------------------------+ | Network Power Flows | | Time: [2030-07-15 14:00 ▼] Animation: [▶ Play] | +----------------------------------------------------------+ | | | [Interactive Network Map] | | | | • Nodes: Sized by load/generation | | • Lines: Thickness = flow magnitude | | • Colors: Green = below 50%, Yellow = 50-80%, Red > 80% | | | | Controls: | | ☑ Show power flows ☑ Show constraints | | ☑ Show voltages ☐ Show losses | | | | Selected Line: North-South Corridor | | Flow: 1,234 MW / 1,500 MW (82.3%) | | Losses: 45.2 MW (3.7%) | +----------------------------------------------------------+ ``` **Network Map Features**: - **Zoom/Pan**: Mouse controls - **Node Click**: Shows bus details - **Line Click**: Shows flow details - **Animation**: Time-lapse of flows - **Export**: SVG or PNG ### 7.3 Scenario Comparison Page #### URL: `/pypsa_results/compare` #### Page Layout: ``` +----------------------------------------------------------+ | Scenario Comparison Tool | +----------------------------------------------------------+ | Selected Scenarios: | | ☑ Net_Zero_2040 ☑ High_RE_2035 ☐ Base_Case_2030 | | | | Comparison Metrics: [Select All ▼] | | ☑ Total Cost ☑ Emissions ☑ RE Share ☑ Reliability | +----------------------------------------------------------+ | | | Side-by-Side Comparison | | +----------------------------------------------------+ | | | Metric | Net_Zero | High_RE | Difference | | | |----------------|----------|----------|-------------| | | | Total Cost | $45.2B | $38.7B | -16.8% | | | | CO2 Emissions | 12 Mt | 45 Mt | -73.3% | | | | RE Share | 78.5% | 65.2% | +13.3pp | | | | LOLE (hrs/yr) | 0.1 | 0.3 | -66.7% | | | +----------------------------------------------------+ | | | | Detailed Comparisons | | | | Technology Mix Comparison | | [Grouped Bar Chart - Capacity by Technology] | | | | Cost Evolution Comparison | | [Multi-line Chart - Annual Costs by Scenario] | | | | Reliability Metrics | | [Radar Chart - Multiple Reliability Indicators] | | | | [Export Comparison] [Create Presentation] | +----------------------------------------------------------+ ``` #### Comparison Features: 1. **Scenario Selection** - Maximum: 5 scenarios - Auto-loads metadata on selection 2. **Metric Selection** - Predefined sets: Cost, Environmental, Technical - Custom metric builder available 3. **Visualization Types** - **Bar Charts**: Direct comparisons - **Spider/Radar**: Multi-dimensional analysis - **Parallel Coordinates**: Complex relationships - **Scatter Matrix**: Correlation analysis 4. **Export Options** - **Excel**: Detailed data tables - **PowerPoint**: Auto-generated slides - **PDF Report**: Comprehensive analysis --- ## 8. Admin Panel ### 8.1 Feature Management Page #### URL: `/admin/features` #### Page Layout: ``` +----------------------------------------------------------+ | Feature Management | +----------------------------------------------------------+ | Current Project: Solar_Study_2024 | | Feature Configuration Level: Project-Specific | +----------------------------------------------------------+ | | | Core Features | | +----------------------------------------------------+ | | | Feature | Status | Description | | | |-----------------------|--------|-------------------| | | | Demand Projection | [ON] | Enable forecasting| | | | Load Profile Gen | [ON] | Create profiles | | | | PyPSA Modeling | [ON] | Power system opt. | | | | Results Visualization | [ON] | View results | | | +----------------------------------------------------+ | | | | Advanced Features | | +----------------------------------------------------+ | | | Feature | Status | Description | | | |-----------------------|--------|-------------------| | | | ML Forecasting | [OFF] | Advanced ML models| | | | Real-time Data | [OFF] | Live data feeds | | | | Monte Carlo Analysis | [ON] | Uncertainty runs | | | | API Access | [ON] | External API | | | +----------------------------------------------------+ | | | | Experimental Features | | +----------------------------------------------------+ | | | Feature | Status | Description | | | |-----------------------|--------|-------------------| | | | AI Assistant | [OFF] | GPT integration | | | | Blockchain Logging | [OFF] | Immutable logs | | | +----------------------------------------------------+ | | | | [Reset to Defaults] [Apply Changes] [Export Config] | +----------------------------------------------------------+ ``` #### Feature Toggle Mechanism: 1. **Toggle Switch Behavior** - **API**: `PUT /api/features/{feature_id}` - **Request Body**: ```json { "enabled": true, "config": { "additional_params": "value" } } ``` 2. **Dependencies** - Some features require others - Auto-enables dependencies - Warns before disabling required features 3. **Configuration Storage** - Global: `/config/features.json` - Project: `{project_path}/project_features.json` ### 8.2 System Monitoring Dashboard #### URL: `/admin/monitoring` #### Page Layout: ``` +----------------------------------------------------------+ | System Monitoring Dashboard | +----------------------------------------------------------+ | System Health: ● Operational | Uptime: 45d 12h 34m | +----------------------------------------------------------+ | | | Real-time Metrics | | +----------------------------------------------------+ | | | CPU Usage Memory Disk I/O | | | | [==== ] 42% [====== ] 61% Read: 45 MB/s | | | | Write: 12 MB/s | | | +----------------------------------------------------+ | | | | Active Jobs Queue | | +----------------------------------------------------+ | | | Job ID | Type | User | Progress | ETA | | | |-----------|-----------|---------|----------|------| | | | job_1234 | PyPSA Run | admin | 67% | 15m | | | | job_1235 | Forecast | user1 | 23% | 8m | | | | job_1236 | Report | user2 | 91% | 2m | | | +----------------------------------------------------+ | | | | Performance Graphs | | [API Response Time Chart] [Database Query Time Chart] | | | | Error Logs (Last 24h) | | +----------------------------------------------------+ | | | Time | Level | Message | | | |----------|-------|--------------------------------| | | | 14:23:10 | WARN | Slow query detected (>5s) | | | | 12:15:45 | ERROR | File upload failed - size limit| | | +----------------------------------------------------+ | | | | [Download Logs] [Clear Cache] [Restart Services] | +----------------------------------------------------------+ ``` --- ## 9. Helper Pages ### 9.1 User Guide Page #### URL: `/user_guide` #### Layout: ``` +----------------------------------------------------------+ | User Guide | +----------------------------------------------------------+ | Search: [_________________] 🔍 | | | | Table of Contents | Content Area | | +------------------------+ | +------------------------+ | | | 1. Getting Started | | | Getting Started | | | | 1.1 Installation | | | | | | | 1.2 First Project | | | Welcome to KSEB Energy | | | | 2. Demand Projection | | | Futures Platform... | | | | 2.1 Data Format | | | | | | | 2.2 Running Models | | | [Embedded Video Guide] | | | | 3. Load Profiles | | | | | | | 4. PyPSA Modeling | | | Step 1: Create Project | | | | 5. Troubleshooting | | | [Screenshot] | | | | 6. FAQ | | | ... | | | +------------------------+ | +------------------------+ | | | | [Download PDF] [Print] [Feedback] | +----------------------------------------------------------+ ``` ### 9.2 Template Download Page #### URL: `/templates` #### Layout: ``` +----------------------------------------------------------+ | Download Templates | +----------------------------------------------------------+ | | | Available Templates | | +----------------------------------------------------+ | | | Template Name | Description | Action | | | |----------------------|------------------|----------| | | | Demand Input File | Historical data | [Download]| | | | Load Curve Template | Hourly patterns | [Download]| | | | PyPSA Input Template | System config | [Download]| | | | Sample Dataset | Example project | [Download]| | | +----------------------------------------------------+ | | | | Template Documentation | | +----------------------------------------------------+ | | | Select a template above to view its documentation | | | +----------------------------------------------------+ | +----------------------------------------------------------+ ``` --- ## 10. Data Flow Diagrams ### 10.1 Complete System Data Flow ```mermaid graph TB subgraph "Data Input" A[Excel Templates] B[User Uploads] C[API Inputs] end subgraph "Processing Modules" D[Demand Projection] E[Load Profile Gen] F[PyPSA Modeling] end subgraph "Storage" G[(Project Database)] H[File System] I[Cache Layer] end subgraph "Output" J[Visualizations] K[Reports] L[API Responses] end A --> D B --> D C --> D D --> G D --> E E --> H E --> F F --> G F --> H G --> J H --> J I --> J J --> K J --> L ``` ### 10.2 Page-to-Page Data Flow ```mermaid sequenceDiagram participant Home participant Project participant Demand participant LoadProfile participant PyPSA participant Results Home->>Project: Create/Load Project Project->>Project: Setup directories Project->>Home: Project loaded Home->>Demand: Navigate to module Demand->>Demand: Upload/Process data Demand->>Demand: Run forecasts Demand->>LoadProfile: Pass results LoadProfile->>LoadProfile: Generate profiles LoadProfile->>PyPSA: Profile ready PyPSA->>PyPSA: Configure model PyPSA->>PyPSA: Run optimization PyPSA->>Results: Save outputs Results->>Results: Process visualizations Results->>Home: Update status ``` --- ## 11. API Reference ### 11.1 Project Management APIs #### Create Project ```http POST /project/create Content-Type: application/json { "projectName": "string", "projectLocation": "string", "description": "string", "initializeWithSampleData": boolean } Response: 201 Created { "success": true, "project_id": "string", "project_path": "string" } ``` #### Load Project ```http POST /project/load Content-Type: application/json { "projectPath": "string" } Response: 200 OK { "success": true, "project_name": "string", "project_path": "string", "last_modified": "datetime" } ``` ### 11.2 Demand Projection APIs #### Run Forecast ```http POST /api/run_forecast Content-Type: application/json { "scenarioName": "string", "targetYear": integer, "excludeCovidYears": boolean, "sectorConfigs": [ { "sector": "string", "models": ["MLR", "SLR"], "parameters": {} } ] } Response: 202 Accepted { "job_id": "string", "status": "queued", "estimated_time": 300 } ``` #### Get Forecast Status ```http GET /api/forecast_status/{job_id} Response: 200 OK { "job_id": "string", "status": "running|completed|failed", "progress": 0.75, "current_step": "Processing Industrial sector", "results_path": "string" } ``` ### 11.3 Load Profile APIs #### Generate Load Profile ```http POST /api/generate_load_profiles Content-Type: application/json { "method": "base_year", "base_year": 2022, "forecast_scenario": "string", "start_year": 2025, "end_year": 2035, "output_frequency": "hourly", "adjustments": { "peak_load_factor": 0.85, "seasonal": {} } } Response: 200 OK { "profile_id": "string", "file_path": "string", "metadata": { "peak_load": 4567.8, "average_load": 3245.6, "load_factor": 0.71 } } ``` ### 11.4 PyPSA APIs #### Run PyPSA Model ```http POST /api/run_pypsa_model Content-Type: application/json { "scenarioName": "string", "overrides": { "years": [2025, 2030, 2035], "solver": "gurobi", "solver_options": {} } } Response: 202 Accepted { "job_id": "string", "status": "queued" } ``` #### Get PyPSA Results ```http GET /api/pypsa/dispatch_data/{network_id}?period=2030&resolution=hourly Response: 200 OK { "timestamps": ["2030-01-01T00:00", ...], "generation": { "solar": [0, 125.5, ...], "wind": [234.1, 245.6, ...] }, "demand": [2845.2, 2790.1, ...], "metadata": { "total_generation": 45678.9, "renewable_share": 0.785 } } ``` --- ## 12. Error Handling and Validation ### 12.1 Common Error Responses ```json { "error": { "code": "VALIDATION_ERROR", "message": "Invalid input data", "details": [ { "field": "targetYear", "issue": "Must be between 2025 and 2050" } ] } } ``` ### 12.2 File Upload Validation - **Size Limits**: 50MB for Excel, 100MB for results - **Format Checks**: Validates required sheets and columns - **Data Integrity**: Checks for missing values, date formats --- ## 13. Performance Considerations ### 13.1 Loading Strategies 1. **Lazy Loading**: Large datasets loaded on-demand 2. **Pagination**: Results tables paginated (50 rows default) 3. **Caching**: Frequently accessed data cached for 1 hour 4. **Progressive Loading**: Charts render with partial data first ### 13.2 Optimization Tips - Use date range filters to reduce data volume - Export large results for offline analysis - Run heavy computations during off-peak hours - Enable job queuing for multiple scenarios ---We will design this webapp. Start writing from scratch we will use lots of work through python modules,reusable modules,js,html and css only.